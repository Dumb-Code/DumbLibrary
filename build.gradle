import java.nio.file.Files

buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
        maven { url = "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.0.7"
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: "maven-publish"
apply plugin: "com.matthewprenger.cursegradle"
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

import groovy.json.JsonSlurper;

def credentialsFile = file "credentials.json"
project.ext.credentials = null
if (credentialsFile.exists()) {
    credentialsFile.withReader {
        project.ext.credentials = new JsonSlurper().parse it
    }
}

def mod_version = getVersion()
version = "1.12.2-" + mod_version
group = "com.dumbcode.dumblibrary" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "dumblibrary"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = "1.12.2-14.23.4.2705"
    runDir = "run"
    mappings = "snapshot_20171003"
}

repositories {
    mavenCentral()
    maven {
        url = "https://maven.mcmoddev.com"
    }
    maven {
        url = "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
}

dependencies {
    deobfCompile "mezz.jei:jei_1.12.2:4.9.1.187:api"
    runtime "mezz.jei:jei_1.12.2:4.9.1.187"
    compile "net.ilexiconn:llibrary:1.7.14-1.12.2"
    compile 'org.projectlombok:lombok:1.18.0'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

task devJar(type: Jar) {
    classifier = "dev"
    from sourceSets.main.output
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.getDestinationDir()
}

artifacts {
    archives sourcesJar
    archives devJar
    archives javadocJar
}

curseforge {

    if (credentials) {
        apiKey = credentials.api_key
    } else {
        apiKey = ""
    }
    project {
        def url = "https://raw.githubusercontent.com/Dumb-Code/DumbLibrary/master/changelogs.json".toURL()
        def changelogs = new JsonSlurper().parseText url.text

        id = '298694'
        def remoteChangelog = changelogs.changelogs[mod_version]
        if (remoteChangelog) {
            changelog = remoteChangelog.join("\n")
        } else {
            changelog = ""
        }
        releaseType = 'beta'
        relations {
            requiredLibrary 'llibrary'
        }
        mainArtifact jar
        addArtifact sourcesJar
        addArtifact devJar
        addArtifact javadocJar
    }
}

String getVersion() {
    def major = "0"
    def revision = "0"
    def patch = "0"
    def prefix = "public static final String VERSION = \""
    def file = file("src/main/java/net/dumbcode/dumblibrary/DumbLibrary.java")
    file.eachLine { String s ->
        s = s.trim()
        if (s.startsWith(prefix)) {
            s = s.substring(prefix.length(), s.length() - 2)
            def pts = s.split("\\.")
            major = pts[0]
            revision = pts[1]
            patch = pts[2]
        }
    }

    return "$major.$revision.$patch";
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
